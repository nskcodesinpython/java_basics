StringBuffer Class 
    - create mutable (modifiable) String objects. The StringBuffer class in Java is the same as String class except it is mutable i.e. it can be changed.
    - Java StringBuffer class is thread-safe i.e. multiple threads cannot access it simultaneously. So it is safe and will result in an order.

Constructors:
    StringBuffer()	            -    It creates an empty String buffer with the initial capacity of 16.
    StringBuffer(String str)	  -    It creates a String buffer with the specified string.
    StringBuffer(int capacity)	-    It creates an empty String buffer with the specified capacity as length.

Methods:

1. append(String s) - append the string value in the end
2. insert(int offset, String s)	- insert a string at specific position
3. replace(int startIndex, int endIndex, String str) - replace the existing substring with new string
4. delete(int startIndex, int endIndex) - delete a substring
5. reverse() - reverse the string
6. capacity()	- gets the capacity of stringbufer - (oldcapacity*2)+2
  
StringBuilder class
      -Java StringBuilder class is used to create mutable (modifiable) String. 
      -Java StringBuilder class is same as StringBuffer class except that it is non-synchronized.
      
Constructors:

    StringBuilder()	                - Creates an empty string builder with a capacity of 16 (16 empty elements).
    StringBuilder(CharSequence cs)	- Constructs a string builder containing the same characters as the specified CharSequence, plus an extra 16 empty elements trailing the CharSequence.
    StringBuilder(int initCapacity)	- Creates an empty string builder with the specified initial capacity.
    StringBuilder(String s)	        - Creates a string builder whose value is initialized by the specified string, plus an extra 16 empty elements trailing the string.
 
Methods:
  Supports same methods as StringBuffer

Difference between String, StringBuffer and StringBuilder:

Mutability Difference:
    - String is immutable, if you try to alter their values, another object gets created, whereas StringBuffer and StringBuilder are mutable so they can change their values.

Thread-Safety Difference:
    - The difference between StringBuffer and StringBuilder is that StringBuffer is thread-safe. So when the application needs to be run only in a single thread then it is better to use StringBuilder. StringBuilder is more efficient than StringBuffer.

Situations:
  - If your string is not going to change use a String class because a String object is immutable.
  - If your string can change (example: lots of logic and operations in the construction of the string) and will only be accessed from a single thread, using a StringBuilder is good enough.
  - If your string can change, and will be accessed from multiple threads, use a StringBuffer because StringBuffer is synchronous so you have thread-safety.
